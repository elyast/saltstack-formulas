{% set haproxy = pillar['haproxy'] %}

global
  daemon
  log 127.0.0.1 local0
  log 127.0.0.1 local1 notice
  maxconn     10000
  ca-base /etc/ssl/certs
  crt-base /etc/ssl/private
  #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
  ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
  ssl-default-bind-options no-sslv3

defaults
  log         global
  retries     3
  maxconn     10000
  backlog     10000
  timeout connect         10s
  timeout client          1m
  timeout server          1m
  timeout http-keep-alive 10s
  timeout http-request    10s
  timeout check           10s
  timeout queue           1m
  option  dontlognull
  option  forwardfor
  option  redispatch
  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http


listen stats
  {% if haproxy['default_client_cert'] is defined -%}
  bind {{ haproxy['stats.host'] }}:{{ haproxy['stats.port'] }} ssl crt /etc/haproxy/server.pem ca-file /etc/haproxy/ca.crt verify required
  {% elif haproxy['server_cert'] is defined -%}
  bind {{ haproxy['stats.host'] }}:{{ haproxy['stats.port'] }} ssl crt /etc/haproxy/server.pem
  {% else -%}
  bind {{ haproxy['stats.host'] }}:{{ haproxy['stats.port'] }}
  {% endif -%}
  balance
  mode http
  stats enable
  stats refresh 20s
  stats uri /stats
  stats auth {{ haproxy['stats.username'] }}:{{ haproxy['stats.password'] }}


{% for app in apps %}

{% for service  in app['services'] %}
{% set mode = service.get('mode', 'http') -%}
{% set server_cert_on = service.get('server_cert_on', False) -%}
{% set client_cert_on = service.get('client_cert_on', False) -%}
{% set client_cert_name = service.get('client_cert_name', 'ca.crt') -%}
{% set service_port = service['service_port'] -%}
frontend {{ app['id'] }}-frontend-{{ service_port }}
  {% if client_cert_on -%}
  bind *:{{ service_port }} ssl crt /etc/haproxy/server.pem ca-file /etc/haproxy/{{ client_cert_name }} verify required
  {% elif server_cert_on -%}
  bind *:{{ service_port }} ssl crt /etc/haproxy/server.pem
  {% else -%}
  bind *:{{ service_port }}
  {% endif -%}
  mode {{ mode }}
  {% if mode == 'http' -%}
  option httplog
  {% if server_cert_on or client_cert_on -%}
  reqadd X-Forwarded-Proto:\ https
  {% else -%}
  reqadd X-Forwarded-Proto:\ http
  {% endif -%}
  {% else -%}
  option tcplog
  {% endif -%}
  use_backend {{ app['id'] }}-backend-{{ service_port }}

backend {{ app['id'] }}-backend-{{ service_port }}
  {% set check_enabled = service.get('check_enabled', True) -%}
  balance {{ service.get('balancing_mode', 'leastconn') }}
  mode {{ mode }}
  {% if mode == 'http' -%}
  option http-server-close
  option httplog
  {% if check_enabled -%}
  option httpchk {{ service.get('httpchk', '') }}
  {% endif -%}
  {% else -%}
  option tcplog
  {% if check_enabled -%}
  option tcp-check {{ service.get('tcpchk', '') }}
  {% endif -%}
  {% endif -%}
  {% if service['backend_addons'] is defined -%}
  {{ service['backend_addons'] }}
  {% endif -%}
  {% for task in service['tasks'] -%}
  server {{ app['id'] }}-{{ loop.index }} {{ task['host'] }}:{{ task['port'] }} {{ 'check' if check_enabled else '' }}
  {% endfor -%}

{% endfor -%}

{% endfor -%}
