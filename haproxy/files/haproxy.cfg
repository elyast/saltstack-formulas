{% set haproxy = pillar['haproxy'] %}

global
  daemon
  log 127.0.0.1 local0
  log 127.0.0.1 local1 notice
  maxconn 4096
  ca-base /etc/ssl/certs
  crt-base /etc/ssl/private
  ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL

defaults
  log         global
  retries     3
  maxconn     10000
  backlog 10000
  timeout connect 5000
  timeout client  50000
  timeout server  50000
  timeout tunnel        3600s
  timeout http-keep-alive  1s
  timeout http-request    15s
  timeout queue           30s
  timeout tarpit          60s
  option  http-server-close
  option  dontlognull
  option  redispatch
  option  contstats
  option forwardfor
  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http


listen stats
  bind {{ haproxy['stats.host'] }}:{{ haproxy['stats.port'] }}
  balance
  mode http
  stats enable
  stats auth {{ haproxy['stats.username'] }}:{{ haproxy['stats.password'] }}


{% for app in apps %}

{% for service  in app['services'] %}
{% set mode = service.get('mode', 'http') -%}
{% set service_port = service['service_port'] -%}
frontend {{ app['id'] }}-frontend-{{ service_port }}
  bind *:{{ service_port }}
  mode {{ mode }}
  {% if mode == 'http' -%}
  option httplog
  {% else -%}
  option tcplog
  {% endif -%}
  use_backend {{ app['id'] }}-backend-{{ service_port }}

backend {{ app['id'] }}-backend-{{ service_port }}
  balance {{ service.get('balancing_mode', 'leastconn') }}
  mode {{ mode }}
  {% if mode == 'http' -%}
  option httplog
  option httpchk {{ service.get('httpchk', '') }}
  {% else -%}
  option tcplog
  {% endif -%}
  {% for task in service['tasks'] -%}
  server {{ app['id'] }}-{{ loop.index }} {{ task['host'] }}:{{ task['port'] }} check
  {% endfor -%}

{% endfor -%}

{% endfor -%}
